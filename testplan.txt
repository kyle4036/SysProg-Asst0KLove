

to make sure the pointer functions worked we ran the code following code to test it
----------------------------------------------------------------------------------
//this is all temporary for testing purposes
  llChar charList;
  llChar* head;
  charList.data = '0';
  head = &charList;
  printf("character 0 :: %c ::\n",charList.data);
  int i;
  for(i = 0;i < 5;i++){
    pushChar(i+'a', &head);
    printf("head address after pushChar %x\n", head);
    printf("#%d:character %c :: %c ::\n",i,i+'a',(*head).data);
    printf("next char :: %c :: \n", (*(*head).next).data);
    if(i > 0){
      printf("next, next char :: %c :: \n", (*(*(*head).next).next).data);
    }
  }
  //printf("next, next char :: %c :: \n", (*(*charList.next).next).data);
----------------------------------------------------------------------------------
  this code creates the characters from a to e and pushes them all onto a charList stack.
  I was having trouble figuring out how to implement a linked list, but figured it out
  eventually
  ----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------


  To make sure the printCharList function worked we ran the following code to test it
  ----------------------------------------------------------------------------------
  llChar* charHead;
  llChar element0;
  element0.data = '0';
  element0.next = NULL;

  charHead = &element0;

  int i;
  for(i = 0;i < 10;i++){
    pushChar(i+'a', &charHead);
  }

  printf("num of elements - %d\nelements -\n", charLen(*charHead));

  printCharList(*charHead);

  return 0;
  ----------------------------------------------------------------------------------
  just a test on the printCharList() function. testing it, we realized that the data was
  input backwards, so we adjusted the function that returns the string to organize the
  data backwards
  ----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------

  to check the printPntrList function I spent 4 hours trying to figure out which
  pointer was broken until I realized that I was sending the function an incorrect value
  thanks c
  ----------------------------------------------------------------------------------
  llChar* charHead;
  llChar cElement0;
  cElement0.data = '\0';
  cElement0.next = NULL;
  charHead = &cElement0;

  llPntr* pHead;
  llPntr pElement0;
  pElement0.data = NULL;
  pElement0.data = NULL;
  pHead = &pElement0;
  //*/


  int i;
  for(i = 0;i < 10;i++){
    pushChar(i+'a', &charHead);
    pushPntr(charHead, &pHead);
    printf("cList %d - %s\n",i,cListToString(*charHead));
    printf("printCharList()");
    printCharList(*charHead);
    printf("current pntr list\n");
    printPntrList(*pHead);
    charHead = &cElement0;
  }

  printf("elements - \n");

  printPntrList(*pHead);
  ----------------------------------------------------------------------------------
  f*** pointers

  ----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------

  to test the strComp we made a basic insertionSort function and checked if it worked
  ----------------------------------------------------------------------------------
  //NIKITA TEST:
  int x = 2;
  int y = 1;
  insertionSort(NULL, strComp);
  //intComp(x, y);
  //END TEST-----
  ----------------------------------------------------------------------------------

  ----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------

  the issue with the swapPntr function was a long and grueling task. many hours passed by
  were slaved away at documenting, debugging and looking for explanations as to why
  data wasn't properly being moved. finally after a long fought battle between the compiler
  and the human, The winner stood higher, triumphant over his kill, prepared to conquor
  another day.
  ----------------------------------------------------------------------------------
  //Testing Code
  //

  llChar* charHead;
  llChar cElement0;
  cElement0.data = '\0';
  cElement0.next = NULL;
  charHead = &cElement0;

  llPntr* pHead;
  llPntr pElement0;
  pElement0.data = NULL;
  pElement0.data = NULL;
  pHead = &pElement0;
  //


  int i;
  for(i = 0;i < 10;i++){
    pushChar(i+'a', &charHead);
    pushPntr(charHead, &pHead);
    charHead = &cElement0;
  }

  printf("elements - \n");
  printPntrList(*pHead);

  //test stuff here

  //printf("address of the 3rd llChar - %0x\n",getPntr(*pHead, 3));
  llPntr* element3 = getPntrAdd(*pHead,3);
  llPntr* element6 = getPntrAdd(*pHead,6);
  printf("*element 3 - %0x \n*element 6 - %0x \n", element3,element6);

  swapPntr(element3, element6);
  printf("elements after first swap- \n");
  printPntrList(*pHead);

  /*void* temp = element3.data;
  element3.data = element6.data;
  element6.data = temp;*/

  //(*element3).data = &cElement0;

  //Doing this thing

  printf("elements after second swap- \n");
  printPntrList(*pHead);
  //End of testing Code
  ----------------------------------------------------------------------------------
  the pass by reference wasn't properly implemented, so data wouldn't go through to the
  main list

  ----------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------
